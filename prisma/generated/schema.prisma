generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum Permission {
  USER_READ
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  USER_RESET_PASSWORD

  PROCESS_READ_OWN
  PROCESS_READ_ALL

  HSTS_MVS_CREATE
}

enum Status {
  PENDING
  STARTED
  END
  ERROR
}

enum ProcessType {
  HSTS_MVS
}

enum HstsMvsStage {
  NOT_STARTED
  PARSE_DRIVER_LICENCE
  VALIDATE_DRIVER_LICENCE
  PARSE_CAR_INFO
  VALIDATE_CAR_INFO
  MODIFY_DATA
  NORMALIZE_DRIVER_LICENCE_ISSUED_BY
  NORMALIZE_REGISTRATION_PLACE
  GENERATE_RESULT_DATA
  FINISHED
}

model User {
  id String @id @default(uuid())

  username    String @unique
  password    String
  displayName String @map("display_name")

  isSuperUser Boolean @default(false) @map("is_super_user")
  isBlocked   Boolean @default(false) @map("is_blocked")

  isTotpEnabled Boolean @default(false) @map("is_totp_enabled")
  totpSecret    String? @map("totp_secret")

  permissions Permission[]

  processes Process[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model StorageFile {
  id String @id @default(uuid())

  inputFilename  String  @map("input_filename")
  outputFilename String? @map("output_filename")
  extension      String
  size           Int
  bucket         String
  path           String

  // MVS
  driverLicenseProcesses ProcessHstsMvs[] @relation("DriverLicenseFile")
  carInfoProcesses       ProcessHstsMvs[] @relation("CarInfoFile")
  resultProcesses        ProcessHstsMvs[] @relation("ResultFile")

  @@map("storage_files")
}

model Process {
  id String @id @default(uuid())

  status Status @default(PENDING)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  owner String?

  type ProcessType

  hstsMvs ProcessHstsMvs?

  createdAt  DateTime  @default(now()) @map("created_at")
  finishedAt DateTime? @map("finished_at")

  @@map("processes")
}

model ProcessHstsMvs {
  processId String  @unique @map("process_id")
  process   Process @relation(fields: [processId], references: [id])

  driverLicenseFileId String      @map("driver_license_file_id")
  driverLicenseFile   StorageFile @relation("DriverLicenseFile", fields: [driverLicenseFileId], references: [id])

  carInfoFileId String      @map("car_info_file_id")
  carInfoFile   StorageFile @relation("CarInfoFile", fields: [carInfoFileId], references: [id])

  resultFileId String?      @map("result_file_id")
  resultFile   StorageFile? @relation("ResultFile", fields: [resultFileId], references: [id])

  isAi Boolean @default(false) @map("is_ai")

  stage        HstsMvsStage @default(NOT_STARTED)
  errorMessage String?      @map("error_message")

  @@map("process_hsts_mvs")
}
